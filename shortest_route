#include <stdio.h>

//Ben
void displayMap1(){
    printf("\t     %d == %d == %d == %d == %d\n", minimap1[0][2], minimap1[0][3], minimap1[0][4], minimap1[0][5], minimap1[0][6]);
	printf("\t    /        /   \\        \\\n");
	printf("\t   %d        /     \\        %d\n", minimap1[1][1], minimap1[1][5]);
	printf("\t  /        /       \\        \\\n");
	printf("\t %d ------ %d ------- %d ------ %d\n", minimap1[2][0], minimap1[2][2], minimap1[2][4], minimap1[2][6]);
	printf("\t  \\        \\       /        /\n");
	printf("\t   %d        \\     /        %d\n", minimap1[3][1], minimap1[3][5]);
	printf("\t    \\        \\   /        /\n");
	printf("\t     %d == %d == %d == %d == %d\n", minimap1[4][2], minimap1[4][3], minimap1[4][4], minimap1[4][5], minimap1[4][6]);
}


int main(){
    int i;
    int row = 2, col = 0;     //temporary initialization
    /* 
        MINI MAP (TENTATIVE FORMAT)
      - array sizes should be constant, unless you guys want to include dynamic memory allocation
      - find random number generator to fill array 
            [IDEAS FOR RANDOM NUMBER GENERATING]
            - can set it as it will only fill certain parts of the array, in others words, fixed minimap with RNG values
      - those with 0 values will be ignored, excluding the starting point, so users can only travel to areas with values > 0
    */
    int minimap[5][7] = { { 0, 0, 6, 5, 2, 0, 0 }
                          { 0, 4, 0, 0, 0, 1, 0 }
                          { 0, 0, 0, 0, 0, 0, 3 }       // test case will set 3rd row, 1st col as starting point ( (2,0) in index form )
                          { 0, 6, 0, 0, 0, 4, 0 }
                          { 0, 0, 7, 2, 1, 0, 0 } };
                          
                          
   /*
        PLAYER MOVEMENT
         - per turn, user gets prompted to enter location in form of letter e.g. A,B,C, letters have corresponding index values
         of mini-map 
         - after user enters letter, store in index
   */
   int player1[5][7] = { { 0, 0, 0, 0, 0, 0, 0 }
                          { 0, 0, 0, 0, 0, 0, 0 }
                          { 0, 0, 0, 0, 0, 0, 0 }       
                          { 0, 0, 0, 0, 0, 0, 0 }
                          { 0, 0, 0, 0, 0, 0, 0 } };
                          
   int player2[5][7] = {  { 0, 0, 0, 0, 0, 0, 0 }
                          { 0, 0, 0, 0, 0, 0, 0 }
                          { 0, 0, 0, 0, 0, 0, 0 }       
                          { 0, 0, 0, 0, 0, 0, 0 }
                          { 0, 0, 0, 0, 0, 0, 0 } };
                        
}
